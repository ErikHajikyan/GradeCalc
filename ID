import json

def loadgradesbreakdown():
    with open('gc_setup.json') as data_file:
        course = json.load(data_file)
    grade_breakdown = course["course_setup"]["grade_breakdown"]
    return grade_breakdown

def loadconvmatrix():
    with open('gc_setup.json') as data_file1:
        conv_matrix = json.load(data_file1)["course_setup"]["conv_matrix"]
    return conv_matrix

def loadgradesfile():
    with open('gc_grades.json') as data_file1:
        gc_grades = json.load(data_file1)
    return gc_grades

def askforstudentid():
    idname = str(raw_input("Please write your ID here: "))
    return idname

def existanceofid(student_grades, idname):
    for key in student_grades:
        if idname == key:
            return 1
    return 0

def inputgrades(gradesbreakdown, student_id):
    addid = {student_id: {}}
    for key in gradesbreakdown:
        print(gradesbreakdown[key])
        addid[student_id][key] = input("What is your Current Grade for: " + key + " Please insert -1 if you don't have a grade yet")
    return addid

def change_grades(gc_grades, student_id):
    for key in gc_grades[student_id]:
        print"Your grade for " + key + 'is ' + str(gc_grades[student_id][key])
        x = raw_input('Do you want to change your grade?(Input Yes or No)')
        if x == str('Yes'):
            gc_grades[student_id][key] = input('Input your new grade')
    return gc_grades

def acceptableid(existanceofid, idname):
        if existanceofid == True:
            l = change_grades(idname, gc_grades)
            return l
        elif existanceofid == False:
            false = inputgrades(gradesbreakdown, idname)
            return false

def saveGrades(current_grades):
    print (json.dumps(curr_grade))
    file = open("students_grades.json", "w")
    file.write(json.dumps(current_grades))
    file.close()

def calculate_final(gradesbreakdown, curr_grade, student_id):
    finalgrade = 0
    for key in curr_grade[student_id]:
        if curr_grade[student_id][key] != -1:
            calc_grade = int(curr_grade[student_id][key]) * gradesbreakdown[key] / 100
            finalgrade = finalgrade + calc_grade
    return finalgrade

def printCurrentLetter(curr_grade,conv_matrix):
    for i in range(len(conv_matrix)):
        if int(conv_matrix[i]["max"]) >= int(curr_grade) and int(conv_matrix[i]["min"]) <= int(curr_grade):
            print "Your grade is " + str(curr_grade) + " and your letter grade is " + str(conv_matrix[i]["mark"])


idname = askforstudentid()
gradesbreakdown = loadgradesbreakdown()
convmatrix = loadconvmatrix()
gc_grades =loadgradesfile()
existanceofid= existanceofid(gc_grades, idname)
curr_grade = acceptableid(existanceofid, idname)
saveGrades(curr_grade)
finalgrade = calculate_final(gradesbreakdown, curr_grade, idname)
printCurrentLetter(convmatrix, finalgrade)
